//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.segue` struct is generated, and contains static references to 4 view controllers.
  struct segue {
    /// This struct is generated for `ForgotPasswordViewController`, and contains static references to 1 segues.
    struct forgotPasswordViewController {
      /// Segue identifier `ResetPasswordViewController`.
      static let resetPasswordViewController: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ForgotPasswordViewController, ResetPasswordViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ResetPasswordViewController")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `ResetPasswordViewController`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func resetPasswordViewController(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ForgotPasswordViewController, ResetPasswordViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.forgotPasswordViewController.resetPasswordViewController, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `SignupViewController`, and contains static references to 1 segues.
    struct signupViewController {
      /// Segue identifier `UserInformationViewController`.
      static let userInformationViewController: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SignupViewController, UserInformationViewController> = Rswift.StoryboardSegueIdentifier(identifier: "UserInformationViewController")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `UserInformationViewController`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func userInformationViewController(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SignupViewController, UserInformationViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.signupViewController.userInformationViewController, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `UserInfoEditingViewController`, and contains static references to 2 segues.
    struct userInfoEditingViewController {
      /// Segue identifier `UserInfoInputTextViewController`.
      static let userInfoInputTextViewController: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, UserInfoEditingViewController, UserInfoInputTextViewController> = Rswift.StoryboardSegueIdentifier(identifier: "UserInfoInputTextViewController")
      /// Segue identifier `UserInfoLikeObjectViewController`.
      static let userInfoLikeObjectViewController: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, UserInfoEditingViewController, UserInfoLikeObjectViewController> = Rswift.StoryboardSegueIdentifier(identifier: "UserInfoLikeObjectViewController")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `UserInfoInputTextViewController`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func userInfoInputTextViewController(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, UserInfoEditingViewController, UserInfoInputTextViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.userInfoEditingViewController.userInfoInputTextViewController, segue: segue)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `UserInfoLikeObjectViewController`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func userInfoLikeObjectViewController(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, UserInfoEditingViewController, UserInfoLikeObjectViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.userInfoEditingViewController.userInfoLikeObjectViewController, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `UserInformationViewController`, and contains static references to 1 segues.
    struct userInformationViewController {
      /// Segue identifier `UserInfoLikeObjectViewController`.
      static let userInfoLikeObjectViewController: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, UserInformationViewController, UserInfoLikeObjectViewController> = Rswift.StoryboardSegueIdentifier(identifier: "UserInfoLikeObjectViewController")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `UserInfoLikeObjectViewController`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func userInfoLikeObjectViewController(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, UserInformationViewController, UserInfoLikeObjectViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.userInformationViewController.userInfoLikeObjectViewController, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 7 storyboards.
  struct storyboard {
    /// Storyboard `Account`.
    static let account = _R.storyboard.account()
    /// Storyboard `Chat`.
    static let chat = _R.storyboard.chat()
    /// Storyboard `Community`.
    static let community = _R.storyboard.community()
    /// Storyboard `Discover`.
    static let discover = _R.storyboard.discover()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `Me`.
    static let me = _R.storyboard.me()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Account", bundle: ...)`
    static func account(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.account)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Chat", bundle: ...)`
    static func chat(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.chat)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Community", bundle: ...)`
    static func community(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.community)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Discover", bundle: ...)`
    static func discover(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.discover)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Me", bundle: ...)`
    static func me(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.me)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.entitlements` struct is generated, and contains static references to 3 properties.
  struct entitlements {
    static let apsEnvironment = infoPlistString(path: [], key: "aps-environment") ?? "development"

    struct comAppleDeveloperApplesignin {
      static let `default` = infoPlistString(path: ["com.apple.developer.applesignin"], key: "Default") ?? "Default"

      fileprivate init() {}
    }

    struct comAppleDeveloperAssociatedDomains {
      static let applinksWwwZhouwu5Com = infoPlistString(path: ["com.apple.developer.associated-domains"], key: "applinks:www.zhouwu5.com") ?? "applinks:www.zhouwu5.com"

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 3 files.
  struct file {
    /// Resource file `README.md`.
    static let readmeMd = Rswift.FileResource(bundle: R.hostingBundle, name: "README", pathExtension: "md")
    /// Resource file `TUIKitFace.bundle`.
    static let tuiKitFaceBundle = Rswift.FileResource(bundle: R.hostingBundle, name: "TUIKitFace", pathExtension: "bundle")
    /// Resource file `TUIKitResource.bundle`.
    static let tuiKitResourceBundle = Rswift.FileResource(bundle: R.hostingBundle, name: "TUIKitResource", pathExtension: "bundle")

    /// `bundle.url(forResource: "README", withExtension: "md")`
    static func readmeMd(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.readmeMd
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "TUIKitFace", withExtension: "bundle")`
    static func tuiKitFaceBundle(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.tuiKitFaceBundle
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "TUIKitResource", withExtension: "bundle")`
    static func tuiKitResourceBundle(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.tuiKitResourceBundle
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 69 images.
  struct image {
    /// Image `account-register-succeed`.
    static let accountRegisterSucceed = Rswift.ImageResource(bundle: R.hostingBundle, name: "account-register-succeed")
    /// Image `add-gray`.
    static let addGray = Rswift.ImageResource(bundle: R.hostingBundle, name: "add-gray")
    /// Image `arrow-down-black`.
    static let arrowDownBlack = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow-down-black")
    /// Image `arrow-right-gray`.
    static let arrowRightGray = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow-right-gray")
    /// Image `arrow-right-white`.
    static let arrowRightWhite = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow-right-white")
    /// Image `box-selected`.
    static let boxSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "box-selected")
    /// Image `box-unselected`.
    static let boxUnselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "box-unselected")
    /// Image `chat-call`.
    static let chatCall = Rswift.ImageResource(bundle: R.hostingBundle, name: "chat-call")
    /// Image `chat-chummy`.
    static let chatChummy = Rswift.ImageResource(bundle: R.hostingBundle, name: "chat-chummy")
    /// Image `chat-contact`.
    static let chatContact = Rswift.ImageResource(bundle: R.hostingBundle, name: "chat-contact")
    /// Image `chat-conversation`.
    static let chatConversation = Rswift.ImageResource(bundle: R.hostingBundle, name: "chat-conversation")
    /// Image `chat-interested`.
    static let chatInterested = Rswift.ImageResource(bundle: R.hostingBundle, name: "chat-interested")
    /// Image `chat-more`.
    static let chatMore = Rswift.ImageResource(bundle: R.hostingBundle, name: "chat-more")
    /// Image `chat-setting`.
    static let chatSetting = Rswift.ImageResource(bundle: R.hostingBundle, name: "chat-setting")
    /// Image `chat-skip`.
    static let chatSkip = Rswift.ImageResource(bundle: R.hostingBundle, name: "chat-skip")
    /// Image `common-close`.
    static let commonClose = Rswift.ImageResource(bundle: R.hostingBundle, name: "common-close")
    /// Image `common-leaderboard`.
    static let commonLeaderboard = Rswift.ImageResource(bundle: R.hostingBundle, name: "common-leaderboard")
    /// Image `common-search`.
    static let commonSearch = Rswift.ImageResource(bundle: R.hostingBundle, name: "common-search")
    /// Image `community-dynamic`.
    static let communityDynamic = Rswift.ImageResource(bundle: R.hostingBundle, name: "community-dynamic")
    /// Image `community-live`.
    static let communityLive = Rswift.ImageResource(bundle: R.hostingBundle, name: "community-live")
    /// Image `community-location`.
    static let communityLocation = Rswift.ImageResource(bundle: R.hostingBundle, name: "community-location")
    /// Image `community-topic`.
    static let communityTopic = Rswift.ImageResource(bundle: R.hostingBundle, name: "community-topic")
    /// Image `form-submit-succeed`.
    static let formSubmitSucceed = Rswift.ImageResource(bundle: R.hostingBundle, name: "form-submit-succeed")
    /// Image `launch-logo`.
    static let launchLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "launch-logo")
    /// Image `launch-screen-logo`.
    static let launchScreenLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "launch-screen-logo")
    /// Image `launch-screen-message`.
    static let launchScreenMessage = Rswift.ImageResource(bundle: R.hostingBundle, name: "launch-screen-message")
    /// Image `like-normal`.
    static let likeNormal = Rswift.ImageResource(bundle: R.hostingBundle, name: "like-normal")
    /// Image `like-selected`.
    static let likeSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "like-selected")
    /// Image `me-anti-fraud`.
    static let meAntiFraud = Rswift.ImageResource(bundle: R.hostingBundle, name: "me-anti-fraud")
    /// Image `me-attention`.
    static let meAttention = Rswift.ImageResource(bundle: R.hostingBundle, name: "me-attention")
    /// Image `me-authentication-head`.
    static let meAuthenticationHead = Rswift.ImageResource(bundle: R.hostingBundle, name: "me-authentication-head")
    /// Image `me-authentication`.
    static let meAuthentication = Rswift.ImageResource(bundle: R.hostingBundle, name: "me-authentication")
    /// Image `me-books`.
    static let meBooks = Rswift.ImageResource(bundle: R.hostingBundle, name: "me-books")
    /// Image `me-card-front`.
    static let meCardFront = Rswift.ImageResource(bundle: R.hostingBundle, name: "me-card-front")
    /// Image `me-card-reverse`.
    static let meCardReverse = Rswift.ImageResource(bundle: R.hostingBundle, name: "me-card-reverse")
    /// Image `me-certified`.
    static let meCertified = Rswift.ImageResource(bundle: R.hostingBundle, name: "me-certified")
    /// Image `me-chat-text`.
    static let meChatText = Rswift.ImageResource(bundle: R.hostingBundle, name: "me-chat-text")
    /// Image `me-chat-video`.
    static let meChatVideo = Rswift.ImageResource(bundle: R.hostingBundle, name: "me-chat-video")
    /// Image `me-edit`.
    static let meEdit = Rswift.ImageResource(bundle: R.hostingBundle, name: "me-edit")
    /// Image `me-follow-add`.
    static let meFollowAdd = Rswift.ImageResource(bundle: R.hostingBundle, name: "me-follow-add")
    /// Image `me-follow`.
    static let meFollow = Rswift.ImageResource(bundle: R.hostingBundle, name: "me-follow")
    /// Image `me-gourmet`.
    static let meGourmet = Rswift.ImageResource(bundle: R.hostingBundle, name: "me-gourmet")
    /// Image `me-grade`.
    static let meGrade = Rswift.ImageResource(bundle: R.hostingBundle, name: "me-grade")
    /// Image `me-help`.
    static let meHelp = Rswift.ImageResource(bundle: R.hostingBundle, name: "me-help")
    /// Image `me-invitation`.
    static let meInvitation = Rswift.ImageResource(bundle: R.hostingBundle, name: "me-invitation")
    /// Image `me-like-object`.
    static let meLikeObject = Rswift.ImageResource(bundle: R.hostingBundle, name: "me-like-object")
    /// Image `me-money`.
    static let meMoney = Rswift.ImageResource(bundle: R.hostingBundle, name: "me-money")
    /// Image `me-movement`.
    static let meMovement = Rswift.ImageResource(bundle: R.hostingBundle, name: "me-movement")
    /// Image `me-movie`.
    static let meMovie = Rswift.ImageResource(bundle: R.hostingBundle, name: "me-movie")
    /// Image `me-music`.
    static let meMusic = Rswift.ImageResource(bundle: R.hostingBundle, name: "me-music")
    /// Image `me-new`.
    static let meNew = Rswift.ImageResource(bundle: R.hostingBundle, name: "me-new")
    /// Image `me-nobility`.
    static let meNobility = Rswift.ImageResource(bundle: R.hostingBundle, name: "me-nobility")
    /// Image `me-notification`.
    static let meNotification = Rswift.ImageResource(bundle: R.hostingBundle, name: "me-notification")
    /// Image `me-setting`.
    static let meSetting = Rswift.ImageResource(bundle: R.hostingBundle, name: "me-setting")
    /// Image `me-sex-man`.
    static let meSexMan = Rswift.ImageResource(bundle: R.hostingBundle, name: "me-sex-man")
    /// Image `me-sex-woman`.
    static let meSexWoman = Rswift.ImageResource(bundle: R.hostingBundle, name: "me-sex-woman")
    /// Image `me-topic`.
    static let meTopic = Rswift.ImageResource(bundle: R.hostingBundle, name: "me-topic")
    /// Image `me-travel`.
    static let meTravel = Rswift.ImageResource(bundle: R.hostingBundle, name: "me-travel")
    /// Image `me-wallet`.
    static let meWallet = Rswift.ImageResource(bundle: R.hostingBundle, name: "me-wallet")
    /// Image `navigation-bar-back`.
    static let navigationBarBack = Rswift.ImageResource(bundle: R.hostingBundle, name: "navigation-bar-back")
    /// Image `remind-white`.
    static let remindWhite = Rswift.ImageResource(bundle: R.hostingBundle, name: "remind-white")
    /// Image `tabbar-community-normal`.
    static let tabbarCommunityNormal = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar-community-normal")
    /// Image `tabbar-community-selected`.
    static let tabbarCommunitySelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar-community-selected")
    /// Image `tabbar-discover-normal`.
    static let tabbarDiscoverNormal = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar-discover-normal")
    /// Image `tabbar-discover-selected`.
    static let tabbarDiscoverSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar-discover-selected")
    /// Image `tabbar-me-normal`.
    static let tabbarMeNormal = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar-me-normal")
    /// Image `tabbar-me-selected`.
    static let tabbarMeSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar-me-selected")
    /// Image `tabbar-message-normal`.
    static let tabbarMessageNormal = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar-message-normal")
    /// Image `tabbar-message-selected`.
    static let tabbarMessageSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar-message-selected")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "account-register-succeed", bundle: ..., traitCollection: ...)`
    static func accountRegisterSucceed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.accountRegisterSucceed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "add-gray", bundle: ..., traitCollection: ...)`
    static func addGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addGray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow-down-black", bundle: ..., traitCollection: ...)`
    static func arrowDownBlack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowDownBlack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow-right-gray", bundle: ..., traitCollection: ...)`
    static func arrowRightGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowRightGray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow-right-white", bundle: ..., traitCollection: ...)`
    static func arrowRightWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowRightWhite, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "box-selected", bundle: ..., traitCollection: ...)`
    static func boxSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.boxSelected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "box-unselected", bundle: ..., traitCollection: ...)`
    static func boxUnselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.boxUnselected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chat-call", bundle: ..., traitCollection: ...)`
    static func chatCall(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chatCall, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chat-chummy", bundle: ..., traitCollection: ...)`
    static func chatChummy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chatChummy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chat-contact", bundle: ..., traitCollection: ...)`
    static func chatContact(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chatContact, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chat-conversation", bundle: ..., traitCollection: ...)`
    static func chatConversation(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chatConversation, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chat-interested", bundle: ..., traitCollection: ...)`
    static func chatInterested(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chatInterested, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chat-more", bundle: ..., traitCollection: ...)`
    static func chatMore(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chatMore, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chat-setting", bundle: ..., traitCollection: ...)`
    static func chatSetting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chatSetting, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chat-skip", bundle: ..., traitCollection: ...)`
    static func chatSkip(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chatSkip, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "common-close", bundle: ..., traitCollection: ...)`
    static func commonClose(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.commonClose, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "common-leaderboard", bundle: ..., traitCollection: ...)`
    static func commonLeaderboard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.commonLeaderboard, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "common-search", bundle: ..., traitCollection: ...)`
    static func commonSearch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.commonSearch, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "community-dynamic", bundle: ..., traitCollection: ...)`
    static func communityDynamic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.communityDynamic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "community-live", bundle: ..., traitCollection: ...)`
    static func communityLive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.communityLive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "community-location", bundle: ..., traitCollection: ...)`
    static func communityLocation(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.communityLocation, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "community-topic", bundle: ..., traitCollection: ...)`
    static func communityTopic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.communityTopic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "form-submit-succeed", bundle: ..., traitCollection: ...)`
    static func formSubmitSucceed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.formSubmitSucceed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "launch-logo", bundle: ..., traitCollection: ...)`
    static func launchLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launchLogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "launch-screen-logo", bundle: ..., traitCollection: ...)`
    static func launchScreenLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launchScreenLogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "launch-screen-message", bundle: ..., traitCollection: ...)`
    static func launchScreenMessage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launchScreenMessage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "like-normal", bundle: ..., traitCollection: ...)`
    static func likeNormal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.likeNormal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "like-selected", bundle: ..., traitCollection: ...)`
    static func likeSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.likeSelected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "me-anti-fraud", bundle: ..., traitCollection: ...)`
    static func meAntiFraud(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.meAntiFraud, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "me-attention", bundle: ..., traitCollection: ...)`
    static func meAttention(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.meAttention, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "me-authentication", bundle: ..., traitCollection: ...)`
    static func meAuthentication(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.meAuthentication, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "me-authentication-head", bundle: ..., traitCollection: ...)`
    static func meAuthenticationHead(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.meAuthenticationHead, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "me-books", bundle: ..., traitCollection: ...)`
    static func meBooks(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.meBooks, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "me-card-front", bundle: ..., traitCollection: ...)`
    static func meCardFront(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.meCardFront, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "me-card-reverse", bundle: ..., traitCollection: ...)`
    static func meCardReverse(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.meCardReverse, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "me-certified", bundle: ..., traitCollection: ...)`
    static func meCertified(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.meCertified, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "me-chat-text", bundle: ..., traitCollection: ...)`
    static func meChatText(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.meChatText, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "me-chat-video", bundle: ..., traitCollection: ...)`
    static func meChatVideo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.meChatVideo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "me-edit", bundle: ..., traitCollection: ...)`
    static func meEdit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.meEdit, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "me-follow", bundle: ..., traitCollection: ...)`
    static func meFollow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.meFollow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "me-follow-add", bundle: ..., traitCollection: ...)`
    static func meFollowAdd(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.meFollowAdd, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "me-gourmet", bundle: ..., traitCollection: ...)`
    static func meGourmet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.meGourmet, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "me-grade", bundle: ..., traitCollection: ...)`
    static func meGrade(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.meGrade, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "me-help", bundle: ..., traitCollection: ...)`
    static func meHelp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.meHelp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "me-invitation", bundle: ..., traitCollection: ...)`
    static func meInvitation(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.meInvitation, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "me-like-object", bundle: ..., traitCollection: ...)`
    static func meLikeObject(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.meLikeObject, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "me-money", bundle: ..., traitCollection: ...)`
    static func meMoney(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.meMoney, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "me-movement", bundle: ..., traitCollection: ...)`
    static func meMovement(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.meMovement, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "me-movie", bundle: ..., traitCollection: ...)`
    static func meMovie(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.meMovie, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "me-music", bundle: ..., traitCollection: ...)`
    static func meMusic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.meMusic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "me-new", bundle: ..., traitCollection: ...)`
    static func meNew(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.meNew, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "me-nobility", bundle: ..., traitCollection: ...)`
    static func meNobility(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.meNobility, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "me-notification", bundle: ..., traitCollection: ...)`
    static func meNotification(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.meNotification, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "me-setting", bundle: ..., traitCollection: ...)`
    static func meSetting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.meSetting, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "me-sex-man", bundle: ..., traitCollection: ...)`
    static func meSexMan(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.meSexMan, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "me-sex-woman", bundle: ..., traitCollection: ...)`
    static func meSexWoman(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.meSexWoman, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "me-topic", bundle: ..., traitCollection: ...)`
    static func meTopic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.meTopic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "me-travel", bundle: ..., traitCollection: ...)`
    static func meTravel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.meTravel, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "me-wallet", bundle: ..., traitCollection: ...)`
    static func meWallet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.meWallet, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "navigation-bar-back", bundle: ..., traitCollection: ...)`
    static func navigationBarBack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navigationBarBack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "remind-white", bundle: ..., traitCollection: ...)`
    static func remindWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.remindWhite, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar-community-normal", bundle: ..., traitCollection: ...)`
    static func tabbarCommunityNormal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbarCommunityNormal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar-community-selected", bundle: ..., traitCollection: ...)`
    static func tabbarCommunitySelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbarCommunitySelected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar-discover-normal", bundle: ..., traitCollection: ...)`
    static func tabbarDiscoverNormal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbarDiscoverNormal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar-discover-selected", bundle: ..., traitCollection: ...)`
    static func tabbarDiscoverSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbarDiscoverSelected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar-me-normal", bundle: ..., traitCollection: ...)`
    static func tabbarMeNormal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbarMeNormal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar-me-selected", bundle: ..., traitCollection: ...)`
    static func tabbarMeSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbarMeSelected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar-message-normal", bundle: ..., traitCollection: ...)`
    static func tabbarMessageNormal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbarMessageNormal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar-message-selected", bundle: ..., traitCollection: ...)`
    static func tabbarMessageSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbarMessageSelected, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 10 nibs.
  struct nib {
    /// Nib `CommunityHeaderView`.
    static let communityHeaderView = _R.nib._CommunityHeaderView()
    /// Nib `InterestedCardOverlayView`.
    static let interestedCardOverlayView = _R.nib._InterestedCardOverlayView()
    /// Nib `InterestedCardView`.
    static let interestedCardView = _R.nib._InterestedCardView()
    /// Nib `LabelViewCell`.
    static let labelViewCell = _R.nib._LabelViewCell()
    /// Nib `RelationshipViewCell`.
    static let relationshipViewCell = _R.nib._RelationshipViewCell()
    /// Nib `TitleViewCell`.
    static let titleViewCell = _R.nib._TitleViewCell()
    /// Nib `UserInfoChatView`.
    static let userInfoChatView = _R.nib._UserInfoChatView()
    /// Nib `UserInfoHeaderView`.
    static let userInfoHeaderView = _R.nib._UserInfoHeaderView()
    /// Nib `WalletEnergyViewCell`.
    static let walletEnergyViewCell = _R.nib._WalletEnergyViewCell()
    /// Nib `WalletProductViewCell`.
    static let walletProductViewCell = _R.nib._WalletProductViewCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CommunityHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.communityHeaderView) instead")
    static func communityHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.communityHeaderView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "InterestedCardOverlayView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.interestedCardOverlayView) instead")
    static func interestedCardOverlayView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.interestedCardOverlayView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "InterestedCardView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.interestedCardView) instead")
    static func interestedCardView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.interestedCardView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "LabelViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.labelViewCell) instead")
    static func labelViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.labelViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "RelationshipViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.relationshipViewCell) instead")
    static func relationshipViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.relationshipViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TitleViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.titleViewCell) instead")
    static func titleViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.titleViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "UserInfoChatView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.userInfoChatView) instead")
    static func userInfoChatView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.userInfoChatView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "UserInfoHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.userInfoHeaderView) instead")
    static func userInfoHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.userInfoHeaderView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WalletEnergyViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.walletEnergyViewCell) instead")
    static func walletEnergyViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.walletEnergyViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WalletProductViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.walletProductViewCell) instead")
    static func walletProductViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.walletProductViewCell)
    }
    #endif

    static func communityHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CommunityHeaderView? {
      return R.nib.communityHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CommunityHeaderView
    }

    static func interestedCardOverlayView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> InterestedCardOverlayView? {
      return R.nib.interestedCardOverlayView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? InterestedCardOverlayView
    }

    static func interestedCardView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> InterestedCardView? {
      return R.nib.interestedCardView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? InterestedCardView
    }

    static func labelViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LabelViewCell? {
      return R.nib.labelViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LabelViewCell
    }

    static func relationshipViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RelationshipViewCell? {
      return R.nib.relationshipViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RelationshipViewCell
    }

    static func titleViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TitleViewCell? {
      return R.nib.titleViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TitleViewCell
    }

    static func userInfoChatView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UserInfoChatView? {
      return R.nib.userInfoChatView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UserInfoChatView
    }

    static func userInfoHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UserInfoHeaderView? {
      return R.nib.userInfoHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UserInfoHeaderView
    }

    static func walletEnergyViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WalletEnergyViewCell? {
      return R.nib.walletEnergyViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WalletEnergyViewCell
    }

    static func walletProductViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WalletProductViewCell? {
      return R.nib.walletProductViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WalletProductViewCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 12 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `DynamicViewCell`.
    static let dynamicViewCell: Rswift.ReuseIdentifier<DynamicViewCell> = Rswift.ReuseIdentifier(identifier: "DynamicViewCell")
    /// Reuse identifier `InformationCell`.
    static let informationCell: Rswift.ReuseIdentifier<InformationCell> = Rswift.ReuseIdentifier(identifier: "InformationCell")
    /// Reuse identifier `TextInputViewCell`.
    static let textInputViewCell: Rswift.ReuseIdentifier<TextInputViewCell> = Rswift.ReuseIdentifier(identifier: "TextInputViewCell")
    /// Reuse identifier `UserInfoBasicInformationCell`.
    static let userInfoBasicInformationCell: Rswift.ReuseIdentifier<UserInfoBasicInformationCell> = Rswift.ReuseIdentifier(identifier: "UserInfoBasicInformationCell")
    /// Reuse identifier `UserInfoInterviewCell`.
    static let userInfoInterviewCell: Rswift.ReuseIdentifier<UserInfoInterviewCell> = Rswift.ReuseIdentifier(identifier: "UserInfoInterviewCell")
    /// Reuse identifier `UserInfoIntroduceCell`.
    static let userInfoIntroduceCell: Rswift.ReuseIdentifier<UserInfoIntroduceCell> = Rswift.ReuseIdentifier(identifier: "UserInfoIntroduceCell")
    /// Reuse identifier `UserInfoLikeObjectCell`.
    static let userInfoLikeObjectCell: Rswift.ReuseIdentifier<UserInfoLikeObjectCell> = Rswift.ReuseIdentifier(identifier: "UserInfoLikeObjectCell")
    /// Reuse identifier `UserInfoMediaCell`.
    static let userInfoMediaCell: Rswift.ReuseIdentifier<UserInfoMediaCell> = Rswift.ReuseIdentifier(identifier: "UserInfoMediaCell")
    /// Reuse identifier `UserInfoPhotoAlbumCell`.
    static let userInfoPhotoAlbumCell: Rswift.ReuseIdentifier<UserInfoPhotoAlbumCell> = Rswift.ReuseIdentifier(identifier: "UserInfoPhotoAlbumCell")
    /// Reuse identifier `UserInfoProfilePhotoCell`.
    static let userInfoProfilePhotoCell: Rswift.ReuseIdentifier<UserInfoProfilePhotoCell> = Rswift.ReuseIdentifier(identifier: "UserInfoProfilePhotoCell")
    /// Reuse identifier `UserInfoTagCell`.
    static let userInfoTagCell: Rswift.ReuseIdentifier<UserInfoTagCell> = Rswift.ReuseIdentifier(identifier: "UserInfoTagCell")
    /// Reuse identifier `cell`.
    static let cell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "cell")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 3 localization tables.
  struct string {
    /// This `R.string.infoPlist` struct is generated, and contains static references to 1 localization keys.
    struct infoPlist {
      /// Value: 贪聊
      static let cfBundleDisplayName = Rswift.StringResource(key: "CFBundleDisplayName", tableName: "InfoPlist", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: 贪聊
      static func cfBundleDisplayName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CFBundleDisplayName", tableName: "InfoPlist", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "InfoPlist", preferredLanguages: preferredLanguages) else {
          return "CFBundleDisplayName"
        }

        return NSLocalizedString("CFBundleDisplayName", tableName: "InfoPlist", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.launchScreen` struct is generated, and contains static references to 2 localization keys.
    struct launchScreen {
      /// zh-Hans translation: 在这里，遇见你
      ///
      /// Locales: zh-Hans
      static let arFdCVfText = Rswift.StringResource(key: "2Ar-Fd-cVf.text", tableName: "LaunchScreen", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 贪聊
      ///
      /// Locales: zh-Hans
      static let nhjWJBLrText = Rswift.StringResource(key: "nhj-wJ-bLr.text", tableName: "LaunchScreen", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)

      /// zh-Hans translation: 在这里，遇见你
      ///
      /// Locales: zh-Hans
      static func arFdCVfText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("2Ar-Fd-cVf.text", tableName: "LaunchScreen", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "LaunchScreen", preferredLanguages: preferredLanguages) else {
          return "2Ar-Fd-cVf.text"
        }

        return NSLocalizedString("2Ar-Fd-cVf.text", tableName: "LaunchScreen", bundle: bundle, comment: "")
      }

      /// zh-Hans translation: 贪聊
      ///
      /// Locales: zh-Hans
      static func nhjWJBLrText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nhj-wJ-bLr.text", tableName: "LaunchScreen", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "LaunchScreen", preferredLanguages: preferredLanguages) else {
          return "nhj-wJ-bLr.text"
        }

        return NSLocalizedString("nhj-wJ-bLr.text", tableName: "LaunchScreen", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.main` struct is generated, and contains static references to 8 localization keys.
    struct main {
      /// zh-Hans translation: First View
      ///
      /// Locales: zh-Hans
      static let lnO0PpBText = Rswift.StringResource(key: "4Ln-O0-ppB.text", tableName: "Main", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: First View
      ///
      /// Locales: zh-Hans
      static let qxb3PCEZText = Rswift.StringResource(key: "qxb-3P-CEZ.text", tableName: "Main", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: Item
      ///
      /// Locales: zh-Hans
      static let h0PNJ3LTitle = Rswift.StringResource(key: "5h0-pN-J3L.title", tableName: "Main", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: Loaded by FirstViewController
      ///
      /// Locales: zh-Hans
      static let drIdHg0Text = Rswift.StringResource(key: "7dr-id-hg0.text", tableName: "Main", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: Loaded by FirstViewController
      ///
      /// Locales: zh-Hans
      static let xXbPnXxEText = Rswift.StringResource(key: "xXb-Pn-XxE.text", tableName: "Main", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 发现
      ///
      /// Locales: zh-Hans
      static let axfBGQF0Title = Rswift.StringResource(key: "axf-bG-qF0.title", tableName: "Main", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 消息
      ///
      /// Locales: zh-Hans
      static let j5TAG3d4Title = Rswift.StringResource(key: "J5T-aG-3d4.title", tableName: "Main", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 社区
      ///
      /// Locales: zh-Hans
      static let acWDTCKfTitle = Rswift.StringResource(key: "acW-dT-cKf.title", tableName: "Main", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)

      /// zh-Hans translation: First View
      ///
      /// Locales: zh-Hans
      static func lnO0PpBText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("4Ln-O0-ppB.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "4Ln-O0-ppB.text"
        }

        return NSLocalizedString("4Ln-O0-ppB.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// zh-Hans translation: First View
      ///
      /// Locales: zh-Hans
      static func qxb3PCEZText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("qxb-3P-CEZ.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "qxb-3P-CEZ.text"
        }

        return NSLocalizedString("qxb-3P-CEZ.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// zh-Hans translation: Item
      ///
      /// Locales: zh-Hans
      static func h0PNJ3LTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("5h0-pN-J3L.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "5h0-pN-J3L.title"
        }

        return NSLocalizedString("5h0-pN-J3L.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// zh-Hans translation: Loaded by FirstViewController
      ///
      /// Locales: zh-Hans
      static func drIdHg0Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("7dr-id-hg0.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "7dr-id-hg0.text"
        }

        return NSLocalizedString("7dr-id-hg0.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// zh-Hans translation: Loaded by FirstViewController
      ///
      /// Locales: zh-Hans
      static func xXbPnXxEText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("xXb-Pn-XxE.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "xXb-Pn-XxE.text"
        }

        return NSLocalizedString("xXb-Pn-XxE.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// zh-Hans translation: 发现
      ///
      /// Locales: zh-Hans
      static func axfBGQF0Title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("axf-bG-qF0.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "axf-bG-qF0.title"
        }

        return NSLocalizedString("axf-bG-qF0.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// zh-Hans translation: 消息
      ///
      /// Locales: zh-Hans
      static func j5TAG3d4Title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("J5T-aG-3d4.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "J5T-aG-3d4.title"
        }

        return NSLocalizedString("J5T-aG-3d4.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// zh-Hans translation: 社区
      ///
      /// Locales: zh-Hans
      static func acWDTCKfTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("acW-dT-cKf.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "acW-dT-cKf.title"
        }

        return NSLocalizedString("acW-dT-cKf.title", tableName: "Main", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _CommunityHeaderView.validate()
      try _InterestedCardOverlayView.validate()
      try _InterestedCardView.validate()
      try _LabelViewCell.validate()
      try _RelationshipViewCell.validate()
      try _UserInfoChatView.validate()
      try _UserInfoHeaderView.validate()
    }

    struct _CommunityHeaderView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CommunityHeaderView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CommunityHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CommunityHeaderView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "common-leaderboard", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'common-leaderboard' is used in nib 'CommunityHeaderView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "common-search", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'common-search' is used in nib 'CommunityHeaderView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "community-live", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'community-live' is used in nib 'CommunityHeaderView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "community-location", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'community-location' is used in nib 'CommunityHeaderView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "community-topic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'community-topic' is used in nib 'CommunityHeaderView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _InterestedCardOverlayView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "InterestedCardOverlayView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> InterestedCardOverlayView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? InterestedCardOverlayView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "chat-conversation", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'chat-conversation' is used in nib 'InterestedCardOverlayView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _InterestedCardView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "InterestedCardView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> InterestedCardView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? InterestedCardView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "arrow-right-white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrow-right-white' is used in nib 'InterestedCardView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _LabelViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "LabelViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LabelViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LabelViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "box-selected", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'box-selected' is used in nib 'LabelViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "box-unselected", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'box-unselected' is used in nib 'LabelViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _RelationshipViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "RelationshipViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RelationshipViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RelationshipViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "me-follow-add", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'me-follow-add' is used in nib 'RelationshipViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "me-sex-man", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'me-sex-man' is used in nib 'RelationshipViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _TitleViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TitleViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TitleViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TitleViewCell
      }

      fileprivate init() {}
    }

    struct _UserInfoChatView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "UserInfoChatView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UserInfoChatView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UserInfoChatView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "me-chat-text", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'me-chat-text' is used in nib 'UserInfoChatView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "me-chat-video", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'me-chat-video' is used in nib 'UserInfoChatView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _UserInfoHeaderView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "UserInfoHeaderView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UserInfoHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UserInfoHeaderView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "me-attention", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'me-attention' is used in nib 'UserInfoHeaderView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "me-certified", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'me-certified' is used in nib 'UserInfoHeaderView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "me-follow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'me-follow' is used in nib 'UserInfoHeaderView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _WalletEnergyViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "WalletEnergyViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WalletEnergyViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WalletEnergyViewCell
      }

      fileprivate init() {}
    }

    struct _WalletProductViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "WalletProductViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WalletProductViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WalletProductViewCell
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try account.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try chat.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try community.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try discover.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try me.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct account: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = BaseNavigationController

      let bundle = R.hostingBundle
      let datePickerViewController = StoryboardViewControllerResource<DatePickerViewController>(identifier: "DatePickerViewController")
      let loginViewController = StoryboardViewControllerResource<LoginViewController>(identifier: "LoginViewController")
      let name = "Account"
      let userInformationViewController = StoryboardViewControllerResource<UserInformationViewController>(identifier: "UserInformationViewController")

      func datePickerViewController(_: Void = ()) -> DatePickerViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: datePickerViewController)
      }

      func loginViewController(_: Void = ()) -> LoginViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginViewController)
      }

      func userInformationViewController(_: Void = ()) -> UserInformationViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userInformationViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "account-register-succeed", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'account-register-succeed' is used in storyboard 'Account', but couldn't be loaded.") }
        if UIKit.UIImage(named: "add-gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'add-gray' is used in storyboard 'Account', but couldn't be loaded.") }
        if UIKit.UIImage(named: "box-selected", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'box-selected' is used in storyboard 'Account', but couldn't be loaded.") }
        if UIKit.UIImage(named: "box-unselected", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'box-unselected' is used in storyboard 'Account', but couldn't be loaded.") }
        if UIKit.UIImage(named: "form-submit-succeed", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'form-submit-succeed' is used in storyboard 'Account', but couldn't be loaded.") }
        if UIKit.UIImage(named: "launch-logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'launch-logo' is used in storyboard 'Account', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.account().datePickerViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'datePickerViewController' could not be loaded from storyboard 'Account' as 'DatePickerViewController'.") }
        if _R.storyboard.account().loginViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginViewController' could not be loaded from storyboard 'Account' as 'LoginViewController'.") }
        if _R.storyboard.account().userInformationViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userInformationViewController' could not be loaded from storyboard 'Account' as 'UserInformationViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct chat: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = BaseNavigationController

      let bundle = R.hostingBundle
      let conversationActionViewController = StoryboardViewControllerResource<ConversationActionViewController>(identifier: "ConversationActionViewController")
      let name = "Chat"

      func conversationActionViewController(_: Void = ()) -> ConversationActionViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: conversationActionViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "chat-contact", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'chat-contact' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "chat-conversation", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'chat-conversation' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "chat-interested", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'chat-interested' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "chat-more", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'chat-more' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "chat-skip", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'chat-skip' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "common-close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'common-close' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tabbar-message-normal", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabbar-message-normal' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tabbar-message-selected", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabbar-message-selected' is used in storyboard 'Chat', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.chat().conversationActionViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'conversationActionViewController' could not be loaded from storyboard 'Chat' as 'ConversationActionViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct community: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = BaseNavigationController

      let bundle = R.hostingBundle
      let name = "Community"

      static func validate() throws {
        if UIKit.UIImage(named: "common-search", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'common-search' is used in storyboard 'Community', but couldn't be loaded.") }
        if UIKit.UIImage(named: "community-dynamic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'community-dynamic' is used in storyboard 'Community', but couldn't be loaded.") }
        if UIKit.UIImage(named: "like-normal", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'like-normal' is used in storyboard 'Community', but couldn't be loaded.") }
        if UIKit.UIImage(named: "like-selected", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'like-selected' is used in storyboard 'Community', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tabbar-community-normal", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabbar-community-normal' is used in storyboard 'Community', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tabbar-community-selected", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabbar-community-selected' is used in storyboard 'Community', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct discover: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = BaseNavigationController

      let bundle = R.hostingBundle
      let name = "Discover"

      static func validate() throws {
        if UIKit.UIImage(named: "tabbar-discover-normal", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabbar-discover-normal' is used in storyboard 'Discover', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tabbar-discover-selected", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabbar-discover-selected' is used in storyboard 'Discover', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "launch-screen-logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'launch-screen-logo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "launch-screen-message", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'launch-screen-message' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = TabBarController

      let bundle = R.hostingBundle
      let name = "Main"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct me: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = BaseNavigationController

      let bundle = R.hostingBundle
      let informationViewController = StoryboardViewControllerResource<InformationViewController>(identifier: "InformationViewController")
      let name = "Me"
      let userBasicInformationViewController = StoryboardViewControllerResource<UserBasicInformationViewController>(identifier: "UserBasicInformationViewController")
      let userInfoInputTextViewController = StoryboardViewControllerResource<UserInfoInputTextViewController>(identifier: "UserInfoInputTextViewController")
      let userInfoLikeObjectViewController = StoryboardViewControllerResource<UserInfoLikeObjectViewController>(identifier: "UserInfoLikeObjectViewController")

      func informationViewController(_: Void = ()) -> InformationViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: informationViewController)
      }

      func userBasicInformationViewController(_: Void = ()) -> UserBasicInformationViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userBasicInformationViewController)
      }

      func userInfoInputTextViewController(_: Void = ()) -> UserInfoInputTextViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userInfoInputTextViewController)
      }

      func userInfoLikeObjectViewController(_: Void = ()) -> UserInfoLikeObjectViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userInfoLikeObjectViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "add-gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'add-gray' is used in storyboard 'Me', but couldn't be loaded.") }
        if UIKit.UIImage(named: "arrow-right-gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrow-right-gray' is used in storyboard 'Me', but couldn't be loaded.") }
        if UIKit.UIImage(named: "arrow-right-white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrow-right-white' is used in storyboard 'Me', but couldn't be loaded.") }
        if UIKit.UIImage(named: "me-anti-fraud", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'me-anti-fraud' is used in storyboard 'Me', but couldn't be loaded.") }
        if UIKit.UIImage(named: "me-attention", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'me-attention' is used in storyboard 'Me', but couldn't be loaded.") }
        if UIKit.UIImage(named: "me-authentication", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'me-authentication' is used in storyboard 'Me', but couldn't be loaded.") }
        if UIKit.UIImage(named: "me-authentication-head", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'me-authentication-head' is used in storyboard 'Me', but couldn't be loaded.") }
        if UIKit.UIImage(named: "me-card-front", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'me-card-front' is used in storyboard 'Me', but couldn't be loaded.") }
        if UIKit.UIImage(named: "me-card-reverse", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'me-card-reverse' is used in storyboard 'Me', but couldn't be loaded.") }
        if UIKit.UIImage(named: "me-edit", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'me-edit' is used in storyboard 'Me', but couldn't be loaded.") }
        if UIKit.UIImage(named: "me-grade", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'me-grade' is used in storyboard 'Me', but couldn't be loaded.") }
        if UIKit.UIImage(named: "me-help", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'me-help' is used in storyboard 'Me', but couldn't be loaded.") }
        if UIKit.UIImage(named: "me-invitation", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'me-invitation' is used in storyboard 'Me', but couldn't be loaded.") }
        if UIKit.UIImage(named: "me-like-object", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'me-like-object' is used in storyboard 'Me', but couldn't be loaded.") }
        if UIKit.UIImage(named: "me-money", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'me-money' is used in storyboard 'Me', but couldn't be loaded.") }
        if UIKit.UIImage(named: "me-new", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'me-new' is used in storyboard 'Me', but couldn't be loaded.") }
        if UIKit.UIImage(named: "me-nobility", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'me-nobility' is used in storyboard 'Me', but couldn't be loaded.") }
        if UIKit.UIImage(named: "me-notification", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'me-notification' is used in storyboard 'Me', but couldn't be loaded.") }
        if UIKit.UIImage(named: "me-setting", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'me-setting' is used in storyboard 'Me', but couldn't be loaded.") }
        if UIKit.UIImage(named: "me-sex-man", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'me-sex-man' is used in storyboard 'Me', but couldn't be loaded.") }
        if UIKit.UIImage(named: "me-topic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'me-topic' is used in storyboard 'Me', but couldn't be loaded.") }
        if UIKit.UIImage(named: "me-wallet", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'me-wallet' is used in storyboard 'Me', but couldn't be loaded.") }
        if UIKit.UIImage(named: "remind-white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'remind-white' is used in storyboard 'Me', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tabbar-me-normal", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabbar-me-normal' is used in storyboard 'Me', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tabbar-me-selected", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabbar-me-selected' is used in storyboard 'Me', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.me().informationViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'informationViewController' could not be loaded from storyboard 'Me' as 'InformationViewController'.") }
        if _R.storyboard.me().userBasicInformationViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userBasicInformationViewController' could not be loaded from storyboard 'Me' as 'UserBasicInformationViewController'.") }
        if _R.storyboard.me().userInfoInputTextViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userInfoInputTextViewController' could not be loaded from storyboard 'Me' as 'UserInfoInputTextViewController'.") }
        if _R.storyboard.me().userInfoLikeObjectViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userInfoLikeObjectViewController' could not be loaded from storyboard 'Me' as 'UserInfoLikeObjectViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}

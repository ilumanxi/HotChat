//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 3 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `Me`.
    static let me = _R.storyboard.me()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Me", bundle: ...)`
    static func me(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.me)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 3 colors.
  struct color {
    /// Color `App Black Color1`.
    static let appBlackColor1 = Rswift.ColorResource(bundle: R.hostingBundle, name: "App Black Color1")
    /// Color `App Black Color2`.
    static let appBlackColor2 = Rswift.ColorResource(bundle: R.hostingBundle, name: "App Black Color2")
    /// Color `App Gray Color`.
    static let appGrayColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "App Gray Color")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "App Black Color1", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appBlackColor1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appBlackColor1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "App Black Color2", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appBlackColor2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appBlackColor2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "App Gray Color", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appGrayColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appGrayColor, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 39 images.
  struct image {
    /// Image `add-gray`.
    static let addGray = Rswift.ImageResource(bundle: R.hostingBundle, name: "add-gray")
    /// Image `arrow-right-gray`.
    static let arrowRightGray = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow-right-gray")
    /// Image `arrow-right-white`.
    static let arrowRightWhite = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow-right-white")
    /// Image `me-anti-fraud`.
    static let meAntiFraud = Rswift.ImageResource(bundle: R.hostingBundle, name: "me-anti-fraud")
    /// Image `me-attention`.
    static let meAttention = Rswift.ImageResource(bundle: R.hostingBundle, name: "me-attention")
    /// Image `me-authentication-head`.
    static let meAuthenticationHead = Rswift.ImageResource(bundle: R.hostingBundle, name: "me-authentication-head")
    /// Image `me-authentication`.
    static let meAuthentication = Rswift.ImageResource(bundle: R.hostingBundle, name: "me-authentication")
    /// Image `me-books`.
    static let meBooks = Rswift.ImageResource(bundle: R.hostingBundle, name: "me-books")
    /// Image `me-card-front`.
    static let meCardFront = Rswift.ImageResource(bundle: R.hostingBundle, name: "me-card-front")
    /// Image `me-card-reverse`.
    static let meCardReverse = Rswift.ImageResource(bundle: R.hostingBundle, name: "me-card-reverse")
    /// Image `me-edit`.
    static let meEdit = Rswift.ImageResource(bundle: R.hostingBundle, name: "me-edit")
    /// Image `me-gourmet`.
    static let meGourmet = Rswift.ImageResource(bundle: R.hostingBundle, name: "me-gourmet")
    /// Image `me-grade`.
    static let meGrade = Rswift.ImageResource(bundle: R.hostingBundle, name: "me-grade")
    /// Image `me-help`.
    static let meHelp = Rswift.ImageResource(bundle: R.hostingBundle, name: "me-help")
    /// Image `me-invitation`.
    static let meInvitation = Rswift.ImageResource(bundle: R.hostingBundle, name: "me-invitation")
    /// Image `me-like-object`.
    static let meLikeObject = Rswift.ImageResource(bundle: R.hostingBundle, name: "me-like-object")
    /// Image `me-money`.
    static let meMoney = Rswift.ImageResource(bundle: R.hostingBundle, name: "me-money")
    /// Image `me-movement`.
    static let meMovement = Rswift.ImageResource(bundle: R.hostingBundle, name: "me-movement")
    /// Image `me-movie`.
    static let meMovie = Rswift.ImageResource(bundle: R.hostingBundle, name: "me-movie")
    /// Image `me-music`.
    static let meMusic = Rswift.ImageResource(bundle: R.hostingBundle, name: "me-music")
    /// Image `me-new`.
    static let meNew = Rswift.ImageResource(bundle: R.hostingBundle, name: "me-new")
    /// Image `me-nobility`.
    static let meNobility = Rswift.ImageResource(bundle: R.hostingBundle, name: "me-nobility")
    /// Image `me-notification`.
    static let meNotification = Rswift.ImageResource(bundle: R.hostingBundle, name: "me-notification")
    /// Image `me-setting`.
    static let meSetting = Rswift.ImageResource(bundle: R.hostingBundle, name: "me-setting")
    /// Image `me-sex-man`.
    static let meSexMan = Rswift.ImageResource(bundle: R.hostingBundle, name: "me-sex-man")
    /// Image `me-sex-woman`.
    static let meSexWoman = Rswift.ImageResource(bundle: R.hostingBundle, name: "me-sex-woman")
    /// Image `me-topic`.
    static let meTopic = Rswift.ImageResource(bundle: R.hostingBundle, name: "me-topic")
    /// Image `me-travel`.
    static let meTravel = Rswift.ImageResource(bundle: R.hostingBundle, name: "me-travel")
    /// Image `me-wallet`.
    static let meWallet = Rswift.ImageResource(bundle: R.hostingBundle, name: "me-wallet")
    /// Image `navigation-bar-back`.
    static let navigationBarBack = Rswift.ImageResource(bundle: R.hostingBundle, name: "navigation-bar-back")
    /// Image `remind-white`.
    static let remindWhite = Rswift.ImageResource(bundle: R.hostingBundle, name: "remind-white")
    /// Image `tabbar-community-normal`.
    static let tabbarCommunityNormal = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar-community-normal")
    /// Image `tabbar-community-selected`.
    static let tabbarCommunitySelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar-community-selected")
    /// Image `tabbar-discover-normal`.
    static let tabbarDiscoverNormal = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar-discover-normal")
    /// Image `tabbar-discover-selected`.
    static let tabbarDiscoverSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar-discover-selected")
    /// Image `tabbar-me-normal`.
    static let tabbarMeNormal = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar-me-normal")
    /// Image `tabbar-me-selected`.
    static let tabbarMeSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar-me-selected")
    /// Image `tabbar-message-normal`.
    static let tabbarMessageNormal = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar-message-normal")
    /// Image `tabbar-message-selected`.
    static let tabbarMessageSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar-message-selected")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "add-gray", bundle: ..., traitCollection: ...)`
    static func addGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addGray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow-right-gray", bundle: ..., traitCollection: ...)`
    static func arrowRightGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowRightGray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow-right-white", bundle: ..., traitCollection: ...)`
    static func arrowRightWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowRightWhite, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "me-anti-fraud", bundle: ..., traitCollection: ...)`
    static func meAntiFraud(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.meAntiFraud, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "me-attention", bundle: ..., traitCollection: ...)`
    static func meAttention(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.meAttention, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "me-authentication", bundle: ..., traitCollection: ...)`
    static func meAuthentication(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.meAuthentication, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "me-authentication-head", bundle: ..., traitCollection: ...)`
    static func meAuthenticationHead(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.meAuthenticationHead, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "me-books", bundle: ..., traitCollection: ...)`
    static func meBooks(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.meBooks, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "me-card-front", bundle: ..., traitCollection: ...)`
    static func meCardFront(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.meCardFront, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "me-card-reverse", bundle: ..., traitCollection: ...)`
    static func meCardReverse(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.meCardReverse, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "me-edit", bundle: ..., traitCollection: ...)`
    static func meEdit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.meEdit, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "me-gourmet", bundle: ..., traitCollection: ...)`
    static func meGourmet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.meGourmet, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "me-grade", bundle: ..., traitCollection: ...)`
    static func meGrade(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.meGrade, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "me-help", bundle: ..., traitCollection: ...)`
    static func meHelp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.meHelp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "me-invitation", bundle: ..., traitCollection: ...)`
    static func meInvitation(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.meInvitation, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "me-like-object", bundle: ..., traitCollection: ...)`
    static func meLikeObject(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.meLikeObject, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "me-money", bundle: ..., traitCollection: ...)`
    static func meMoney(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.meMoney, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "me-movement", bundle: ..., traitCollection: ...)`
    static func meMovement(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.meMovement, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "me-movie", bundle: ..., traitCollection: ...)`
    static func meMovie(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.meMovie, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "me-music", bundle: ..., traitCollection: ...)`
    static func meMusic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.meMusic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "me-new", bundle: ..., traitCollection: ...)`
    static func meNew(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.meNew, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "me-nobility", bundle: ..., traitCollection: ...)`
    static func meNobility(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.meNobility, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "me-notification", bundle: ..., traitCollection: ...)`
    static func meNotification(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.meNotification, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "me-setting", bundle: ..., traitCollection: ...)`
    static func meSetting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.meSetting, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "me-sex-man", bundle: ..., traitCollection: ...)`
    static func meSexMan(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.meSexMan, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "me-sex-woman", bundle: ..., traitCollection: ...)`
    static func meSexWoman(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.meSexWoman, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "me-topic", bundle: ..., traitCollection: ...)`
    static func meTopic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.meTopic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "me-travel", bundle: ..., traitCollection: ...)`
    static func meTravel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.meTravel, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "me-wallet", bundle: ..., traitCollection: ...)`
    static func meWallet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.meWallet, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "navigation-bar-back", bundle: ..., traitCollection: ...)`
    static func navigationBarBack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navigationBarBack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "remind-white", bundle: ..., traitCollection: ...)`
    static func remindWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.remindWhite, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar-community-normal", bundle: ..., traitCollection: ...)`
    static func tabbarCommunityNormal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbarCommunityNormal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar-community-selected", bundle: ..., traitCollection: ...)`
    static func tabbarCommunitySelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbarCommunitySelected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar-discover-normal", bundle: ..., traitCollection: ...)`
    static func tabbarDiscoverNormal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbarDiscoverNormal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar-discover-selected", bundle: ..., traitCollection: ...)`
    static func tabbarDiscoverSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbarDiscoverSelected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar-me-normal", bundle: ..., traitCollection: ...)`
    static func tabbarMeNormal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbarMeNormal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar-me-selected", bundle: ..., traitCollection: ...)`
    static func tabbarMeSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbarMeSelected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar-message-normal", bundle: ..., traitCollection: ...)`
    static func tabbarMessageNormal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbarMessageNormal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar-message-selected", bundle: ..., traitCollection: ...)`
    static func tabbarMessageSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbarMessageSelected, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 9 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `UserInfoBasicInformationCell`.
    static let userInfoBasicInformationCell: Rswift.ReuseIdentifier<UserInfoBasicInformationCell> = Rswift.ReuseIdentifier(identifier: "UserInfoBasicInformationCell")
    /// Reuse identifier `UserInfoInterviewCell`.
    static let userInfoInterviewCell: Rswift.ReuseIdentifier<UserInfoInterviewCell> = Rswift.ReuseIdentifier(identifier: "UserInfoInterviewCell")
    /// Reuse identifier `UserInfoIntroduceCell`.
    static let userInfoIntroduceCell: Rswift.ReuseIdentifier<UserInfoIntroduceCell> = Rswift.ReuseIdentifier(identifier: "UserInfoIntroduceCell")
    /// Reuse identifier `UserInfoLikeObjectCell`.
    static let userInfoLikeObjectCell: Rswift.ReuseIdentifier<UserInfoLikeObjectCell> = Rswift.ReuseIdentifier(identifier: "UserInfoLikeObjectCell")
    /// Reuse identifier `UserInfoMediaCell`.
    static let userInfoMediaCell: Rswift.ReuseIdentifier<UserInfoMediaCell> = Rswift.ReuseIdentifier(identifier: "UserInfoMediaCell")
    /// Reuse identifier `UserInfoPhotoAlbumCell`.
    static let userInfoPhotoAlbumCell: Rswift.ReuseIdentifier<UserInfoPhotoAlbumCell> = Rswift.ReuseIdentifier(identifier: "UserInfoPhotoAlbumCell")
    /// Reuse identifier `UserInfoProfilePhotoCell`.
    static let userInfoProfilePhotoCell: Rswift.ReuseIdentifier<UserInfoProfilePhotoCell> = Rswift.ReuseIdentifier(identifier: "UserInfoProfilePhotoCell")
    /// Reuse identifier `UserInfoTagCell`.
    static let userInfoTagCell: Rswift.ReuseIdentifier<UserInfoTagCell> = Rswift.ReuseIdentifier(identifier: "UserInfoTagCell")
    /// Reuse identifier `cell`.
    static let cell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "cell")

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try me.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = TabBarController

      let bundle = R.hostingBundle
      let name = "Main"

      static func validate() throws {
        if UIKit.UIImage(named: "tabbar-community-normal", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabbar-community-normal' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tabbar-community-selected", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabbar-community-selected' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tabbar-discover-normal", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabbar-discover-normal' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tabbar-discover-selected", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabbar-discover-selected' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tabbar-message-normal", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabbar-message-normal' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tabbar-message-selected", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabbar-message-selected' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct me: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = BaseNavigationController

      let bundle = R.hostingBundle
      let name = "Me"

      static func validate() throws {
        if UIKit.UIImage(named: "add-gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'add-gray' is used in storyboard 'Me', but couldn't be loaded.") }
        if UIKit.UIImage(named: "arrow-right-gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrow-right-gray' is used in storyboard 'Me', but couldn't be loaded.") }
        if UIKit.UIImage(named: "arrow-right-white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrow-right-white' is used in storyboard 'Me', but couldn't be loaded.") }
        if UIKit.UIImage(named: "me-anti-fraud", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'me-anti-fraud' is used in storyboard 'Me', but couldn't be loaded.") }
        if UIKit.UIImage(named: "me-attention", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'me-attention' is used in storyboard 'Me', but couldn't be loaded.") }
        if UIKit.UIImage(named: "me-authentication", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'me-authentication' is used in storyboard 'Me', but couldn't be loaded.") }
        if UIKit.UIImage(named: "me-authentication-head", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'me-authentication-head' is used in storyboard 'Me', but couldn't be loaded.") }
        if UIKit.UIImage(named: "me-card-front", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'me-card-front' is used in storyboard 'Me', but couldn't be loaded.") }
        if UIKit.UIImage(named: "me-card-reverse", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'me-card-reverse' is used in storyboard 'Me', but couldn't be loaded.") }
        if UIKit.UIImage(named: "me-edit", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'me-edit' is used in storyboard 'Me', but couldn't be loaded.") }
        if UIKit.UIImage(named: "me-grade", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'me-grade' is used in storyboard 'Me', but couldn't be loaded.") }
        if UIKit.UIImage(named: "me-help", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'me-help' is used in storyboard 'Me', but couldn't be loaded.") }
        if UIKit.UIImage(named: "me-invitation", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'me-invitation' is used in storyboard 'Me', but couldn't be loaded.") }
        if UIKit.UIImage(named: "me-like-object", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'me-like-object' is used in storyboard 'Me', but couldn't be loaded.") }
        if UIKit.UIImage(named: "me-money", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'me-money' is used in storyboard 'Me', but couldn't be loaded.") }
        if UIKit.UIImage(named: "me-new", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'me-new' is used in storyboard 'Me', but couldn't be loaded.") }
        if UIKit.UIImage(named: "me-nobility", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'me-nobility' is used in storyboard 'Me', but couldn't be loaded.") }
        if UIKit.UIImage(named: "me-notification", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'me-notification' is used in storyboard 'Me', but couldn't be loaded.") }
        if UIKit.UIImage(named: "me-setting", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'me-setting' is used in storyboard 'Me', but couldn't be loaded.") }
        if UIKit.UIImage(named: "me-sex-man", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'me-sex-man' is used in storyboard 'Me', but couldn't be loaded.") }
        if UIKit.UIImage(named: "me-topic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'me-topic' is used in storyboard 'Me', but couldn't be loaded.") }
        if UIKit.UIImage(named: "me-wallet", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'me-wallet' is used in storyboard 'Me', but couldn't be loaded.") }
        if UIKit.UIImage(named: "remind-white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'remind-white' is used in storyboard 'Me', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tabbar-me-normal", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabbar-me-normal' is used in storyboard 'Me', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tabbar-me-selected", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabbar-me-selected' is used in storyboard 'Me', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
